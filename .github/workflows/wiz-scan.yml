name: "wiz-cli"
on:
  pull_request:
    branches:
      - main # Or your main branch

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
env:
  aws_repo: "klinden/my-flask-app"
  aws_region: "us-east-1"

jobs:
  wiz-cli-image-scan:
    name: "Wiz-cli Image Scan"
    runs-on: ubuntu-latest # You can keep ubuntu-latest, the buildx action handles the architecture.
    env:
      SCAN_PATH: "." # Set the relative path in the repo to build the image from
      POLICY: "Default vulnerabilities policy" # Set the desired Wiz CLI policy to use
      WIZ_ENV: "fedramp"

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      #Get AWS Creds
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{secrets.aws_role}}
          aws-region: ${{env.aws_region}}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      # Checkout the repository to the GitHub Actions runner
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image (ARM64 Only)
        id: build-push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/arm64 # Changed to only build for ARM64
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.aws_repo }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.aws_repo }}:${{ github.sha }}

      - name: Download Wiz CLI
        run: curl -o wizcli https://downloads.wiz.io/wizcli/latest/wizcli-linux-amd64 && chmod +x wizcli

      - name: Authenticate to Wiz
        run: ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
        env:
          WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
          WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

      - name: List images
        run: docker pull -platform=linux/arm64 ${{ steps.login-ecr.outputs.registry }}/${{ env.aws_repo }}:latest my-flask-app-arm64.tar

      - name: Run wiz-cli docker image scan
        run: ./wizcli docker scan --image my-flask-app-arm64.tar --policy "$POLICY" 

      - name: Fetch digest of Docker image for Graph enrichment
        run: ./wizcli docker tag --image -i my-flask-app-arm64.tar --digest ${{ steps.build-push.outputs.digest }}
